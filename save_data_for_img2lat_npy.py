# -*- coding: utf-8 -*-
"""StyleGan - Img2Vec CNN Train

Modified from code automatically generated by Colaboratory.
"""


import os
import numpy as np
import random
# Load PIL
from PIL import Image

import argparse

import logging 
from logging import debug as dbg

logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s - \n%(message)s')
#logging.disable(logging.CRITICAL)

def read_reg_img(filename, size=(1024, 1024)):
   im_reg = Image.open(filename)
   im_reg.thumbnail(size)
   return im_reg

# this generator returns a batch of face images and corresponding vectors
def input_gen(batch_size=16):
    while True:
        
        idx_list = random.sample(range(len(path_img)), batch_size)
        
        img_list = []
        vec_list = []
        
        count=0
        for idx in idx_list:
            count = count +1
            print(count)
            #print(idx)
            tmp_img_path = path_img[idx]
            tmp_file_path = os.path.dirname(tmp_img_path).split('/')[:-1]
            tmp_file_path_join = ''
            for idx in range(len(tmp_file_path)): tmp_file_path_join = os.path.join(tmp_file_path_join,tmp_file_path[idx])

            tmp_file_num = os.path.basename(tmp_img_path).split('.')[-2]
            tmp_vec_path = tmp_file_path_join+'/npy/g_out.' + str(tmp_file_num) + '.npy'
            
            tmp_img = read_reg_img(tmp_img_path, size=(224,224))
            tmp_vec = np.load(tmp_vec_path)
            
            img_list.append(np.array(tmp_img))
            vec_list.append(tmp_vec[0])
            
    
        #print(vec_list)
        yield np.array(img_list), np.array(vec_list)

# construct the argument parser and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-pi", "--path-input", required=True, help="Path to the directory containing face images and corresponding gan input vectors")
ap.add_argument("-po", "--path-output", required=True, help="Path to the directory where numpy array files will be saved")
args = vars(ap.parse_args())

dbg('args["path_input"]')
dbg(args["path_input"])

fpi = args["path_input"]

dbg('args["path_output"]')
dbg(args["path_output"])

fpo = args["path_output"]

""" walk though path and get images"""

path_img = []
for (dirpath, dirnames, filenames) in os.walk(fpi):
    for x in filenames:
        tmp_ext=os.path.basename(x).split('.')[-1]
        tmp_ext_lower = tmp_ext.lower()
        if tmp_ext_lower=='png':
            path_img.append(os.path.join(dirpath, x))
    #f.extend(filenames)
    #f.extend(dirnames)
    #break
print(path_img)
print(len(path_img))

"""now that we have a list of image paths, lets convert that to vector npy file paths"""

tmp_path = path_img[0]
print(tmp_path)

tmp_file_path = os.path.dirname(tmp_path).split('/')[:-1]
tmp_file_path_join = ''
for idx in range(len(tmp_file_path)): tmp_file_path_join = os.path.join(tmp_file_path_join,tmp_file_path[idx])
dbg(tmp_file_path_join)

tmp_file_num = os.path.basename(tmp_path).split('.')[-2]
print(tmp_file_num)

new_file_path = tmp_file_path_join + '/npy/g_out.' + str(tmp_file_num) + '.npy'
print(new_file_path)


""" Lets try reading in the npy file"""

tmp_img_vec = np.load(new_file_path)
print(tmp_img_vec[0])

"""we can read the vector. lets make sure we can read in the image itself"""

test_img = read_reg_img(path_img[0])


# save all images to single image npy file
# save all vecs to single vec npy file
### This makes life easier if we ever need to restart this process later (if so, comment this block of code and uncomment np.load block)
sg_img_list, sg_vec_list = next(input_gen(batch_size=10000))
np.save(fpo+'/sg_img_list.npy', sg_img_list)
np.save(fpo+'/sg_vec_list.npy', sg_vec_list)
